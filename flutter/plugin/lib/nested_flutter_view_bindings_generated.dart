// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/plugin.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NestedFlutterViewBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NestedFlutterViewBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NestedFlutterViewBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void cache_delete_nested_flutter_view_handle_function(
    int shell_id,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> function,
  ) {
    return _cache_delete_nested_flutter_view_handle_function(
      shell_id,
      function,
    );
  }

  late final _cache_delete_nested_flutter_view_handle_functionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.IntPtr,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'cache_delete_nested_flutter_view_handle_function');
  late final _cache_delete_nested_flutter_view_handle_function =
      _cache_delete_nested_flutter_view_handle_functionPtr.asFunction<
          void Function(
              int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void test(
    int handler,
  ) {
    return _test(
      handler,
    );
  }

  late final _testPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('test');
  late final _test = _testPtr.asFunction<void Function(int)>();
}
